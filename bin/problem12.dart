/// Problem 12: Highly divisible triangular number
//  The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
// ten terms would be:
//  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

int divisibleTriangleNumber(int divisorCount) {
  int index = 1;
  int triangularNumber = getTriangularNumber(index);
  while (divisorCount > getDivisorCount(triangularNumber)) {
    index++;
    triangularNumber = getTriangularNumber(index);
  }
  return triangularNumber;
}

int getTriangularNumber(int n) => (n * (n + 1) / 2).floor();

int getDivisorCount(int number) {
  int count = 0;
  for (int i = 1; i <= number; i++) {
    if (number % i == 0) {
      count++;
    }
  }
  return count;
}
